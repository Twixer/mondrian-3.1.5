
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Thu Jun 13 23:42:33 CEST 2013
//----------------------------------------------------

package mondrian.olap;

import java_cup.runtime.*;
import java.util.*;
import mondrian.resource.MondrianResource;
import mondrian.mdx.*;

/** CUP v0.10k generated parser.
  * @version Thu Jun 13 23:42:33 CEST 2013
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\204\000\002\002\004\000\002\040\003\000\002\042" +
    "\003\000\002\041\003\000\002\041\003\000\002\037\003" +
    "\000\002\037\003\000\002\036\003\000\002\036\003\000" +
    "\002\027\003\000\002\027\005\000\002\026\003\000\002" +
    "\026\005\000\002\030\003\000\002\020\003\000\002\020" +
    "\005\000\002\020\005\000\002\017\003\000\002\017\005" +
    "\000\002\016\003\000\002\016\004\000\002\015\003\000" +
    "\002\015\005\000\002\015\005\000\002\015\005\000\002" +
    "\015\005\000\002\015\005\000\002\015\006\000\002\015" +
    "\005\000\002\015\006\000\002\014\003\000\002\014\005" +
    "\000\002\014\005\000\002\014\005\000\002\013\003\000" +
    "\002\013\005\000\002\013\005\000\002\011\003\000\002" +
    "\011\004\000\002\011\004\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\005\000\002\022\005" +
    "\000\002\022\005\000\002\022\010\000\002\022\006\000" +
    "\002\022\006\000\002\022\005\000\002\022\005\000\002" +
    "\022\003\000\002\022\003\000\002\005\007\000\002\021" +
    "\002\000\002\021\003\000\002\072\002\000\002\072\004" +
    "\000\002\074\006\000\002\006\002\000\002\006\004\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\035\003\000\002\035\003\000\002\007" +
    "\005\000\002\007\003\000\002\007\003\000\002\010\003" +
    "\000\002\010\002\000\002\065\002\000\002\065\003\000" +
    "\002\064\003\000\002\064\005\000\002\004\005\000\002" +
    "\025\003\000\002\025\004\000\002\024\011\000\002\073" +
    "\002\000\002\073\004\000\002\056\002\000\002\056\003" +
    "\000\002\055\003\000\002\055\005\000\002\023\002\000" +
    "\002\023\004\000\002\060\002\000\002\060\003\000\002" +
    "\066\003\000\002\066\004\000\002\045\003\000\002\045" +
    "\003\000\002\043\007\000\002\043\007\000\002\061\002" +
    "\000\002\061\004\000\002\067\003\000\002\067\005\000" +
    "\002\032\003\000\002\046\005\000\002\044\006\000\002" +
    "\044\006\000\002\033\003\000\002\003\007\000\002\003" +
    "\007\000\002\054\002\000\002\054\004\000\002\063\002" +
    "\000\002\063\003\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\075\003\000\002\075\006\000\002\062\005\000\002\051" +
    "\002\000\002\051\003\000\002\070\003\000\002\070\005" +
    "\000\002\052\003\000\002\031\003\000\002\012\003\000" +
    "\002\057\005\000\002\047\002\000\002\047\003\000\002" +
    "\071\003\000\002\071\005\000\002\050\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\311\000\010\036\uffb1\044\005\045\007\001\002\000" +
    "\004\002\uffb4\001\002\000\006\024\266\037\264\001\002" +
    "\000\004\002\260\001\002\000\036\007\051\010\031\014" +
    "\040\026\025\027\054\033\033\057\027\061\026\063\047" +
    "\065\022\071\037\072\030\073\044\075\034\001\002\000" +
    "\004\036\011\001\002\000\042\007\uff96\010\uff96\014\uff96" +
    "\020\uffaf\025\015\026\uff96\027\uff96\033\uff96\057\uff96\061" +
    "\uff96\063\uff96\065\uff96\071\uff96\072\uff96\073\uff96\075\uff96" +
    "\001\002\000\004\020\235\001\002\000\036\007\051\010" +
    "\031\014\040\026\025\027\054\033\033\057\027\061\026" +
    "\063\047\065\022\071\037\072\030\073\044\075\034\001" +
    "\002\000\006\020\uffad\051\020\001\002\000\004\016\017" +
    "\001\002\000\004\020\uffae\001\002\000\036\007\uff95\010" +
    "\uff95\014\uff95\026\uff95\027\uff95\033\uff95\057\uff95\061\uff95" +
    "\063\uff95\065\uff95\071\uff95\072\uff95\073\uff95\075\uff95\001" +
    "\002\000\040\007\uff96\010\uff96\014\uff96\025\015\026\uff96" +
    "\027\uff96\033\uff96\057\uff96\061\uff96\063\uff96\065\uff96\071" +
    "\uff96\072\uff96\073\uff96\075\uff96\001\002\000\004\020\uffac" +
    "\001\002\000\030\007\051\010\031\014\040\027\054\033" +
    "\033\057\027\061\026\071\037\072\030\073\044\075\034" +
    "\001\002\000\116\002\uffd7\004\uffd7\005\uffd7\011\uffd7\014" +
    "\uffd7\015\uffd7\017\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7" +
    "\026\uffd7\030\uffd7\031\uffd7\033\uffd7\036\uffd7\037\uffd7\040" +
    "\uffd7\041\uffd7\043\uffd7\046\uffd7\047\ufff6\050\uffd7\051\uffd7" +
    "\052\uffd7\053\uffd7\054\uffd7\055\uffd7\056\uffd7\060\uffd7\061" +
    "\ufff6\062\uffd7\063\uffd7\064\uffd7\065\uffd7\066\uffd7\067\uffd7" +
    "\070\uffd7\001\002\000\112\002\uffcd\004\uffcd\005\uffcd\011" +
    "\uffcd\014\uffcd\015\uffcd\017\uffcd\021\uffcd\022\uffcd\023\uffcd" +
    "\024\uffcd\026\uffcd\030\uffcd\031\uffcd\033\uffcd\036\uffcd\037" +
    "\uffcd\040\uffcd\041\uffcd\043\uffcd\046\uffcd\050\uffcd\051\uffcd" +
    "\052\uffcd\053\uffcd\054\uffcd\055\uffcd\056\uffcd\060\uffcd\062" +
    "\uffcd\063\uffcd\064\uffcd\065\uffcd\066\uffcd\067\uffcd\070\uffcd" +
    "\001\002\000\036\007\051\010\031\014\040\026\025\027" +
    "\054\033\033\057\027\061\026\063\047\065\022\071\037" +
    "\072\030\073\044\075\034\001\002\000\040\007\051\010" +
    "\031\014\040\026\025\027\054\033\033\051\uffba\057\027" +
    "\061\026\063\047\065\022\071\037\072\030\073\044\075" +
    "\034\001\002\000\042\007\051\010\031\014\040\026\025" +
    "\027\054\033\033\051\uffba\057\027\061\026\063\047\065" +
    "\022\066\uffb9\071\037\072\030\073\044\075\034\001\002" +
    "\000\120\002\ufffe\004\ufffe\005\ufffe\011\ufffe\014\ufffe\015" +
    "\ufffe\017\ufffe\021\ufffe\022\ufffe\023\ufffe\024\ufffe\026\ufffe" +
    "\030\ufffe\031\ufffe\033\ufffe\036\ufffe\037\ufffe\040\ufffe\041" +
    "\ufffe\042\ufffe\043\ufffe\046\ufffe\047\ufffe\050\ufffe\051\ufffe" +
    "\052\ufffe\053\ufffe\054\ufffe\055\ufffe\056\ufffe\060\ufffe\061" +
    "\ufffe\062\ufffe\063\ufffe\064\ufffe\065\ufffe\066\ufffe\067\ufffe" +
    "\070\ufffe\001\002\000\004\061\223\001\002\000\006\047" +
    "\216\061\217\001\002\000\120\002\ufff9\004\ufff9\005\ufff9" +
    "\011\ufff9\014\ufff9\015\ufff9\017\ufff9\021\ufff9\022\ufff9\023" +
    "\ufff9\024\ufff9\026\ufff9\030\ufff9\031\ufff9\033\ufff9\036\ufff9" +
    "\037\ufff9\040\ufff9\041\ufff9\042\ufff9\043\ufff9\046\ufff9\047" +
    "\ufff9\050\ufff9\051\ufff9\052\ufff9\053\ufff9\054\ufff9\055\ufff9" +
    "\056\ufff9\060\ufff9\061\ufff9\062\ufff9\063\ufff9\064\ufff9\065" +
    "\ufff9\066\ufff9\067\ufff9\070\ufff9\001\002\000\112\002\uffd9" +
    "\004\uffd9\005\uffd9\011\uffd9\014\uffd9\015\uffd9\017\uffd9\021" +
    "\uffd9\022\uffd9\023\uffd9\024\uffd9\026\uffd9\030\uffd9\031\uffd9" +
    "\033\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\043\uffd9\046" +
    "\uffd9\050\uffd9\051\uffd9\052\uffd9\053\uffd9\054\uffd9\055\uffd9" +
    "\056\uffd9\060\uffd9\062\uffd9\063\uffd9\064\uffd9\065\uffd9\066" +
    "\uffd9\067\uffd9\070\uffd9\001\002\000\014\005\075\014\165" +
    "\030\uff94\033\uff8a\050\076\001\002\000\040\002\uffbc\005" +
    "\uffbc\011\uffbc\014\uffbc\024\uffbc\030\uffbc\031\100\033\uffbc" +
    "\036\uffbc\037\uffbc\043\101\050\uffbc\051\uffbc\066\uffbc\067" +
    "\uffbc\001\002\000\112\002\uffd8\004\uffd8\005\uffd8\011\uffd8" +
    "\014\uffd8\015\uffd8\017\uffd8\021\uffd8\022\uffd8\023\uffd8\024" +
    "\uffd8\026\uffd8\030\uffd8\031\uffd8\033\uffd8\036\uffd8\037\uffd8" +
    "\040\uffd8\041\uffd8\043\uffd8\046\uffd8\050\uffd8\051\uffd8\052" +
    "\uffd8\053\uffd8\054\uffd8\055\uffd8\056\uffd8\060\uffd8\062\uffd8" +
    "\063\uffd8\064\uffd8\065\uffd8\066\uffd8\067\uffd8\070\uffd8\001" +
    "\002\000\120\002\ufffa\004\ufffa\005\ufffa\011\ufffa\014\ufffa" +
    "\015\ufffa\017\ufffa\021\ufffa\022\ufffa\023\ufffa\024\ufffa\026" +
    "\ufffa\030\ufffa\031\ufffa\033\ufffa\036\ufffa\037\ufffa\040\ufffa" +
    "\041\ufffa\042\ufffa\043\ufffa\046\ufffa\047\ufffa\050\ufffa\051" +
    "\ufffa\052\ufffa\053\ufffa\054\ufffa\055\ufffa\056\ufffa\060\ufffa" +
    "\061\ufffa\062\ufffa\063\ufffa\064\ufffa\065\ufffa\066\ufffa\067" +
    "\ufffa\070\ufffa\001\002\000\110\002\uffdf\004\uffdf\005\uffdf" +
    "\011\uffdf\014\uffdf\015\uffdf\017\uffdf\021\uffdf\022\uffdf\023" +
    "\uffdf\024\uffdf\026\uffdf\030\uffdf\031\uffdf\033\uffdf\036\uffdf" +
    "\037\uffdf\040\uffdf\041\uffdf\043\uffdf\046\uffdf\050\uffdf\051" +
    "\uffdf\052\uffdf\054\uffdf\055\uffdf\056\uffdf\060\uffdf\062\uffdf" +
    "\063\uffdf\064\uffdf\065\uffdf\066\uffdf\067\uffdf\070\uffdf\001" +
    "\002\000\034\002\uffbd\005\uffbd\011\uffbd\014\uffbd\024\uffbd" +
    "\030\uffbd\033\uffbd\036\uffbd\037\uffbd\050\uffbd\051\uffbd\066" +
    "\uffbd\067\uffbd\001\002\000\110\002\uffe3\004\uffe3\005\uffe3" +
    "\011\uffe3\014\uffe3\015\uffe3\017\uffe3\021\uffe3\022\uffe3\023" +
    "\uffe3\024\uffe3\026\uffe3\030\uffe3\031\uffe3\033\uffe3\036\uffe3" +
    "\037\uffe3\040\uffe3\041\uffe3\043\uffe3\046\114\050\uffe3\051" +
    "\uffe3\052\uffe3\054\uffe3\055\uffe3\056\uffe3\060\uffe3\062\uffe3" +
    "\063\uffe3\064\uffe3\065\uffe3\066\uffe3\067\uffe3\070\115\001" +
    "\002\000\120\002\000\004\000\005\000\011\000\014\000" +
    "\015\000\017\000\021\000\022\000\023\000\024\000\026" +
    "\000\030\000\031\000\033\000\036\000\037\000\040\000" +
    "\041\000\042\000\043\000\046\000\047\000\050\000\051" +
    "\000\052\000\053\000\054\000\055\000\056\000\060\000" +
    "\061\000\062\000\063\000\064\000\065\000\066\000\067" +
    "\000\070\000\001\002\000\052\002\ufff3\004\103\005\ufff3" +
    "\011\ufff3\014\ufff3\015\ufff3\017\ufff3\024\ufff3\030\ufff3\031" +
    "\ufff3\033\ufff3\036\ufff3\037\ufff3\040\ufff3\041\ufff3\043\ufff3" +
    "\050\ufff3\051\ufff3\066\ufff3\067\ufff3\001\002\000\052\002" +
    "\ufff0\004\ufff0\005\ufff0\011\ufff0\014\ufff0\015\ufff0\017\ufff0" +
    "\024\ufff0\030\ufff0\031\ufff0\033\ufff0\036\ufff0\037\ufff0\040" +
    "\ufff0\041\ufff0\043\ufff0\050\ufff0\051\ufff0\066\ufff0\067\ufff0" +
    "\001\002\000\030\007\051\010\031\014\040\027\054\033" +
    "\033\057\027\061\026\071\037\072\030\073\044\075\034" +
    "\001\002\000\076\002\uffee\004\uffee\005\uffee\011\uffee\014" +
    "\uffee\015\uffee\017\uffee\021\136\022\150\023\145\024\uffee" +
    "\026\144\030\uffee\031\uffee\033\uffee\036\uffee\037\uffee\040" +
    "\uffee\041\uffee\043\uffee\050\uffee\051\uffee\054\141\055\140" +
    "\056\143\060\142\062\147\064\146\066\uffee\067\uffee\001" +
    "\002\000\044\007\051\010\031\014\040\015\uffcb\017\uffcb" +
    "\026\025\027\054\033\033\041\uffcb\057\027\061\026\063" +
    "\047\065\022\071\037\072\030\073\044\075\034\001\002" +
    "\000\104\002\uffec\004\uffec\005\uffec\011\uffec\014\uffec\015" +
    "\uffec\017\uffec\021\uffec\022\uffec\023\uffec\024\uffec\026\uffec" +
    "\030\uffec\031\uffec\033\uffec\036\uffec\037\uffec\040\uffec\041" +
    "\uffec\043\uffec\050\uffec\051\uffec\052\111\054\uffec\055\uffec" +
    "\056\uffec\060\uffec\062\uffec\063\112\064\uffec\065\110\066" +
    "\uffec\067\uffec\001\002\000\112\002\uffdc\004\uffdc\005\uffdc" +
    "\011\uffdc\014\uffdc\015\uffdc\017\uffdc\021\uffdc\022\uffdc\023" +
    "\uffdc\024\uffdc\026\uffdc\030\uffdc\031\uffdc\033\uffdc\036\uffdc" +
    "\037\uffdc\040\uffdc\041\uffdc\043\uffdc\046\uffdc\050\uffdc\051" +
    "\uffdc\052\uffdc\053\060\054\uffdc\055\uffdc\056\uffdc\060\uffdc" +
    "\062\uffdc\063\uffdc\064\uffdc\065\uffdc\066\uffdc\067\uffdc\070" +
    "\uffdc\001\002\000\112\002\uffce\004\uffce\005\uffce\011\uffce" +
    "\014\uffce\015\uffce\017\uffce\021\uffce\022\uffce\023\uffce\024" +
    "\uffce\026\uffce\030\uffce\031\uffce\033\uffce\036\uffce\037\uffce" +
    "\040\uffce\041\uffce\043\uffce\046\uffce\050\uffce\051\uffce\052" +
    "\uffce\053\uffce\054\uffce\055\uffce\056\uffce\060\uffce\062\uffce" +
    "\063\uffce\064\uffce\065\uffce\066\uffce\067\uffce\070\uffce\001" +
    "\002\000\120\002\ufffd\004\ufffd\005\ufffd\011\ufffd\014\ufffd" +
    "\015\ufffd\017\ufffd\021\ufffd\022\ufffd\023\ufffd\024\ufffd\026" +
    "\ufffd\030\ufffd\031\ufffd\033\ufffd\036\ufffd\037\ufffd\040\ufffd" +
    "\041\ufffd\042\ufffd\043\ufffd\046\ufffd\047\ufffd\050\ufffd\051" +
    "\ufffd\052\ufffd\053\ufffd\054\ufffd\055\ufffd\056\ufffd\060\ufffd" +
    "\061\ufffd\062\ufffd\063\ufffd\064\ufffd\065\ufffd\066\ufffd\067" +
    "\ufffd\070\ufffd\001\002\000\120\002\ufffc\004\ufffc\005\ufffc" +
    "\011\ufffc\014\ufffc\015\ufffc\017\ufffc\021\ufffc\022\ufffc\023" +
    "\ufffc\024\ufffc\026\ufffc\030\ufffc\031\ufffc\033\ufffc\036\ufffc" +
    "\037\ufffc\040\ufffc\041\ufffc\042\ufffc\043\ufffc\046\ufffc\047" +
    "\ufffc\050\ufffc\051\ufffc\052\ufffc\053\ufffc\054\ufffc\055\ufffc" +
    "\056\ufffc\060\ufffc\061\ufffc\062\ufffc\063\ufffc\064\ufffc\065" +
    "\ufffc\066\ufffc\067\ufffc\070\ufffc\001\002\000\120\002\ufffb" +
    "\004\ufffb\005\ufffb\011\ufffb\014\ufffb\015\ufffb\017\ufffb\021" +
    "\ufffb\022\ufffb\023\ufffb\024\ufffb\026\ufffb\030\ufffb\031\ufffb" +
    "\033\ufffb\036\ufffb\037\ufffb\040\ufffb\041\ufffb\042\ufffb\043" +
    "\ufffb\046\ufffb\047\ufffb\050\ufffb\051\ufffb\052\ufffb\053\ufffb" +
    "\054\ufffb\055\ufffb\056\ufffb\060\ufffb\061\ufffb\062\ufffb\063" +
    "\ufffb\064\ufffb\065\ufffb\066\ufffb\067\ufffb\070\ufffb\001\002" +
    "\000\014\014\040\033\033\072\030\073\044\074\065\001" +
    "\002\000\112\002\uffd4\004\uffd4\005\uffd4\011\uffd4\014\uffd4" +
    "\015\uffd4\017\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4\026" +
    "\uffd4\030\uffd4\031\uffd4\033\uffd4\036\uffd4\037\uffd4\040\uffd4" +
    "\041\uffd4\043\uffd4\046\uffd4\050\uffd4\051\uffd4\052\uffd4\053" +
    "\uffd4\054\uffd4\055\uffd4\056\uffd4\060\uffd4\062\uffd4\063\uffd4" +
    "\064\uffd4\065\uffd4\066\uffd4\067\uffd4\070\uffd4\001\002\000" +
    "\004\061\066\001\002\000\114\002\uffd6\004\uffd6\005\uffd6" +
    "\011\uffd6\014\uffd6\015\uffd6\017\uffd6\021\uffd6\022\uffd6\023" +
    "\uffd6\024\uffd6\026\uffd6\030\uffd6\031\uffd6\033\uffd6\036\uffd6" +
    "\037\uffd6\040\uffd6\041\uffd6\043\uffd6\046\uffd6\050\uffd6\051" +
    "\uffd6\052\uffd6\053\uffd6\054\uffd6\055\uffd6\056\uffd6\060\uffd6" +
    "\061\ufffc\062\uffd6\063\uffd6\064\uffd6\065\uffd6\066\uffd6\067" +
    "\uffd6\070\uffd6\001\002\000\114\002\uffd5\004\uffd5\005\uffd5" +
    "\011\uffd5\014\uffd5\015\uffd5\017\uffd5\021\uffd5\022\uffd5\023" +
    "\uffd5\024\uffd5\026\uffd5\030\uffd5\031\uffd5\033\uffd5\036\uffd5" +
    "\037\uffd5\040\uffd5\041\uffd5\043\uffd5\046\uffd5\050\uffd5\051" +
    "\uffd5\052\uffd5\053\uffd5\054\uffd5\055\uffd5\056\uffd5\060\uffd5" +
    "\061\ufffb\062\uffd5\063\uffd5\064\uffd5\065\uffd5\066\uffd5\067" +
    "\uffd5\070\uffd5\001\002\000\112\002\uffff\004\uffff\005\uffff" +
    "\011\uffff\014\uffff\015\uffff\017\uffff\021\uffff\022\uffff\023" +
    "\uffff\024\uffff\026\uffff\030\uffff\031\uffff\033\uffff\036\uffff" +
    "\037\uffff\040\uffff\041\uffff\043\uffff\046\uffff\050\uffff\051" +
    "\uffff\052\uffff\053\uffff\054\uffff\055\uffff\056\uffff\060\uffff" +
    "\062\uffff\063\uffff\064\uffff\065\uffff\066\uffff\067\uffff\070" +
    "\uffff\001\002\000\042\007\051\010\031\014\040\026\025" +
    "\027\054\033\033\051\uffba\057\027\061\026\063\047\065" +
    "\022\067\uffb9\071\037\072\030\073\044\075\034\001\002" +
    "\000\004\067\107\001\002\000\006\066\uffb8\067\uffb8\001" +
    "\002\000\014\005\075\050\076\051\uffbb\066\uffb7\067\uffb7" +
    "\001\002\000\004\051\073\001\002\000\040\007\051\010" +
    "\031\014\040\026\025\027\054\033\033\051\uffba\057\027" +
    "\061\026\063\047\065\022\071\037\072\030\073\044\075" +
    "\034\001\002\000\006\066\uffb6\067\uffb6\001\002\000\012" +
    "\014\040\033\033\072\030\073\044\001\002\000\036\007" +
    "\051\010\031\014\040\026\025\027\054\033\033\057\027" +
    "\061\026\063\047\065\022\071\037\072\030\073\044\075" +
    "\034\001\002\000\040\002\uffbe\005\uffbe\011\uffbe\014\uffbe" +
    "\024\uffbe\030\uffbe\031\100\033\uffbe\036\uffbe\037\uffbe\043" +
    "\101\050\uffbe\051\uffbe\066\uffbe\067\uffbe\001\002\000\036" +
    "\007\051\010\031\014\040\026\025\027\054\033\033\057" +
    "\027\061\026\063\047\065\022\071\037\072\030\073\044" +
    "\075\034\001\002\000\036\007\051\010\031\014\040\026" +
    "\025\027\054\033\033\057\027\061\026\063\047\065\022" +
    "\071\037\072\030\073\044\075\034\001\002\000\052\002" +
    "\ufff1\004\103\005\ufff1\011\ufff1\014\ufff1\015\ufff1\017\ufff1" +
    "\024\ufff1\030\ufff1\031\ufff1\033\ufff1\036\ufff1\037\ufff1\040" +
    "\ufff1\041\ufff1\043\ufff1\050\ufff1\051\ufff1\066\ufff1\067\ufff1" +
    "\001\002\000\036\007\051\010\031\014\040\026\025\027" +
    "\054\033\033\057\027\061\026\063\047\065\022\071\037" +
    "\072\030\073\044\075\034\001\002\000\052\002\uffef\004" +
    "\uffef\005\uffef\011\uffef\014\uffef\015\uffef\017\uffef\024\uffef" +
    "\030\uffef\031\uffef\033\uffef\036\uffef\037\uffef\040\uffef\041" +
    "\uffef\043\uffef\050\uffef\051\uffef\066\uffef\067\uffef\001\002" +
    "\000\052\002\ufff2\004\103\005\ufff2\011\ufff2\014\ufff2\015" +
    "\ufff2\017\ufff2\024\ufff2\030\ufff2\031\ufff2\033\ufff2\036\ufff2" +
    "\037\ufff2\040\ufff2\041\ufff2\043\ufff2\050\ufff2\051\ufff2\066" +
    "\ufff2\067\ufff2\001\002\000\034\002\uffb5\005\uffb5\011\uffb5" +
    "\014\uffb5\024\uffb5\030\uffb5\033\uffb5\036\uffb5\037\uffb5\050" +
    "\uffb5\051\uffb5\066\uffb5\067\uffb5\001\002\000\112\002\uffd3" +
    "\004\uffd3\005\uffd3\011\uffd3\014\uffd3\015\uffd3\017\uffd3\021" +
    "\uffd3\022\uffd3\023\uffd3\024\uffd3\026\uffd3\030\uffd3\031\uffd3" +
    "\033\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\043\uffd3\046" +
    "\uffd3\050\uffd3\051\uffd3\052\uffd3\053\uffd3\054\uffd3\055\uffd3" +
    "\056\uffd3\060\uffd3\062\uffd3\063\uffd3\064\uffd3\065\uffd3\066" +
    "\uffd3\067\uffd3\070\uffd3\001\002\000\034\007\051\010\031" +
    "\014\040\027\054\033\033\057\027\061\026\063\047\065" +
    "\022\071\037\072\030\073\044\075\034\001\002\000\034" +
    "\007\051\010\031\014\040\027\054\033\033\057\027\061" +
    "\026\063\047\065\022\071\037\072\030\073\044\075\034" +
    "\001\002\000\034\007\051\010\031\014\040\027\054\033" +
    "\033\057\027\061\026\063\047\065\022\071\037\072\030" +
    "\073\044\075\034\001\002\000\110\002\uffe1\004\uffe1\005" +
    "\uffe1\011\uffe1\014\uffe1\015\uffe1\017\uffe1\021\uffe1\022\uffe1" +
    "\023\uffe1\024\uffe1\026\uffe1\030\uffe1\031\uffe1\033\uffe1\036" +
    "\uffe1\037\uffe1\040\uffe1\041\uffe1\043\uffe1\046\114\050\uffe1" +
    "\051\uffe1\052\uffe1\054\uffe1\055\uffe1\056\uffe1\060\uffe1\062" +
    "\uffe1\063\uffe1\064\uffe1\065\uffe1\066\uffe1\067\uffe1\070\115" +
    "\001\002\000\034\007\051\010\031\014\040\027\054\033" +
    "\033\057\027\061\026\063\047\065\022\071\037\072\030" +
    "\073\044\075\034\001\002\000\034\007\051\010\031\014" +
    "\040\027\054\033\033\057\027\061\026\063\047\065\022" +
    "\071\037\072\030\073\044\075\034\001\002\000\110\002" +
    "\uffdd\004\uffdd\005\uffdd\011\uffdd\014\uffdd\015\uffdd\017\uffdd" +
    "\021\uffdd\022\uffdd\023\uffdd\024\uffdd\026\uffdd\030\uffdd\031" +
    "\uffdd\033\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd\043\uffdd" +
    "\046\uffdd\050\uffdd\051\uffdd\052\uffdd\054\uffdd\055\uffdd\056" +
    "\uffdd\060\uffdd\062\uffdd\063\uffdd\064\uffdd\065\uffdd\066\uffdd" +
    "\067\uffdd\070\uffdd\001\002\000\110\002\uffde\004\uffde\005" +
    "\uffde\011\uffde\014\uffde\015\uffde\017\uffde\021\uffde\022\uffde" +
    "\023\uffde\024\uffde\026\uffde\030\uffde\031\uffde\033\uffde\036" +
    "\uffde\037\uffde\040\uffde\041\uffde\043\uffde\046\uffde\050\uffde" +
    "\051\uffde\052\uffde\054\uffde\055\uffde\056\uffde\060\uffde\062" +
    "\uffde\063\uffde\064\uffde\065\uffde\066\uffde\067\uffde\070\uffde" +
    "\001\002\000\110\002\uffe0\004\uffe0\005\uffe0\011\uffe0\014" +
    "\uffe0\015\uffe0\017\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0" +
    "\026\uffe0\030\uffe0\031\uffe0\033\uffe0\036\uffe0\037\uffe0\040" +
    "\uffe0\041\uffe0\043\uffe0\046\114\050\uffe0\051\uffe0\052\uffe0" +
    "\054\uffe0\055\uffe0\056\uffe0\060\uffe0\062\uffe0\063\uffe0\064" +
    "\uffe0\065\uffe0\066\uffe0\067\uffe0\070\115\001\002\000\110" +
    "\002\uffe2\004\uffe2\005\uffe2\011\uffe2\014\uffe2\015\uffe2\017" +
    "\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2\026\uffe2\030\uffe2" +
    "\031\uffe2\033\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2\043" +
    "\uffe2\046\114\050\uffe2\051\uffe2\052\uffe2\054\uffe2\055\uffe2" +
    "\056\uffe2\060\uffe2\062\uffe2\063\uffe2\064\uffe2\065\uffe2\066" +
    "\uffe2\067\uffe2\070\115\001\002\000\014\015\uffca\017\uffca" +
    "\031\100\041\uffca\043\101\001\002\000\010\015\uffc9\017" +
    "\uffc9\041\uffc9\001\002\000\010\015\126\017\uffc6\041\127" +
    "\001\002\000\004\017\135\001\002\000\036\007\051\010" +
    "\031\014\040\026\025\027\054\033\033\057\027\061\026" +
    "\063\047\065\022\071\037\072\030\073\044\075\034\001" +
    "\002\000\036\007\051\010\031\014\040\026\025\027\054" +
    "\033\033\057\027\061\026\063\047\065\022\071\037\072" +
    "\030\073\044\075\034\001\002\000\010\015\uffc8\017\uffc8" +
    "\041\uffc8\001\002\000\010\031\100\040\132\043\101\001" +
    "\002\000\036\007\051\010\031\014\040\026\025\027\054" +
    "\033\033\057\027\061\026\063\047\065\022\071\037\072" +
    "\030\073\044\075\034\001\002\000\014\015\uffc7\017\uffc7" +
    "\031\100\041\uffc7\043\101\001\002\000\010\017\uffc5\031" +
    "\100\043\101\001\002\000\112\002\uffcc\004\uffcc\005\uffcc" +
    "\011\uffcc\014\uffcc\015\uffcc\017\uffcc\021\uffcc\022\uffcc\023" +
    "\uffcc\024\uffcc\026\uffcc\030\uffcc\031\uffcc\033\uffcc\036\uffcc" +
    "\037\uffcc\040\uffcc\041\uffcc\043\uffcc\046\uffcc\050\uffcc\051" +
    "\uffcc\052\uffcc\053\uffcc\054\uffcc\055\uffcc\056\uffcc\060\uffcc" +
    "\062\uffcc\063\uffcc\064\uffcc\065\uffcc\066\uffcc\067\uffcc\070" +
    "\uffcc\001\002\000\034\007\051\010\031\014\040\027\054" +
    "\033\033\057\027\061\026\063\047\065\022\071\037\072" +
    "\030\073\044\075\034\001\002\000\034\007\051\010\031" +
    "\014\040\027\054\033\033\057\027\061\026\063\047\065" +
    "\022\071\037\072\030\073\044\075\034\001\002\000\034" +
    "\007\uffbf\010\uffbf\014\uffbf\027\uffbf\033\uffbf\057\uffbf\061" +
    "\uffbf\063\uffbf\065\uffbf\071\uffbf\072\uffbf\073\uffbf\075\uffbf" +
    "\001\002\000\034\007\uffc4\010\uffc4\014\uffc4\027\uffc4\033" +
    "\uffc4\057\uffc4\061\uffc4\063\uffc4\065\uffc4\071\uffc4\072\uffc4" +
    "\073\uffc4\075\uffc4\001\002\000\034\007\uffc0\010\uffc0\014" +
    "\uffc0\027\uffc0\033\uffc0\057\uffc0\061\uffc0\063\uffc0\065\uffc0" +
    "\071\uffc0\072\uffc0\073\uffc0\075\uffc0\001\002\000\034\007" +
    "\uffc1\010\uffc1\014\uffc1\027\uffc1\033\uffc1\057\uffc1\061\uffc1" +
    "\063\uffc1\065\uffc1\071\uffc1\072\uffc1\073\uffc1\075\uffc1\001" +
    "\002\000\006\021\155\023\156\001\002\000\034\007\051" +
    "\010\031\014\040\027\054\033\033\057\027\061\026\063" +
    "\047\065\022\071\037\072\030\073\044\075\034\001\002" +
    "\000\034\007\uffc3\010\uffc3\014\uffc3\027\uffc3\033\uffc3\057" +
    "\uffc3\061\uffc3\063\uffc3\065\uffc3\071\uffc3\072\uffc3\073\uffc3" +
    "\075\uffc3\001\002\000\034\007\uffc2\010\uffc2\014\uffc2\027" +
    "\uffc2\033\uffc2\057\uffc2\061\uffc2\063\uffc2\065\uffc2\071\uffc2" +
    "\072\uffc2\073\uffc2\075\uffc2\001\002\000\036\007\051\010" +
    "\031\014\040\016\153\027\152\033\033\057\027\061\026" +
    "\063\047\065\022\071\037\072\030\073\044\075\034\001" +
    "\002\000\104\002\uffe9\004\uffe9\005\uffe9\011\uffe9\014\uffe9" +
    "\015\uffe9\017\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9\026" +
    "\uffe9\030\uffe9\031\uffe9\033\uffe9\036\uffe9\037\uffe9\040\uffe9" +
    "\041\uffe9\043\uffe9\050\uffe9\051\uffe9\052\111\054\uffe9\055" +
    "\uffe9\056\uffe9\060\uffe9\062\uffe9\063\112\064\uffe9\065\110" +
    "\066\uffe9\067\uffe9\001\002\000\112\002\uffea\004\uffea\005" +
    "\uffea\011\uffea\014\uffea\015\uffea\017\uffea\021\uffea\022\uffea" +
    "\023\uffea\024\uffea\026\uffea\030\uffea\031\uffea\033\uffea\036" +
    "\uffea\037\uffea\040\uffea\041\uffea\043\uffea\046\uffce\050\uffea" +
    "\051\uffea\052\uffce\053\uffce\054\uffea\055\uffea\056\uffea\060" +
    "\uffea\062\uffea\063\uffce\064\uffea\065\uffce\066\uffea\067\uffea" +
    "\070\uffce\001\002\000\076\002\uffe8\004\uffe8\005\uffe8\011" +
    "\uffe8\014\uffe8\015\uffe8\017\uffe8\021\uffe8\022\uffe8\023\uffe8" +
    "\024\uffe8\026\uffe8\030\uffe8\031\uffe8\033\uffe8\036\uffe8\037" +
    "\uffe8\040\uffe8\041\uffe8\043\uffe8\050\uffe8\051\uffe8\054\uffe8" +
    "\055\uffe8\056\uffe8\060\uffe8\062\uffe8\064\uffe8\066\uffe8\067" +
    "\uffe8\001\002\000\104\002\uffe7\004\uffe7\005\uffe7\011\uffe7" +
    "\014\uffe7\015\uffe7\017\uffe7\021\uffe7\022\uffe7\023\uffe7\024" +
    "\uffe7\026\uffe7\030\uffe7\031\uffe7\033\uffe7\036\uffe7\037\uffe7" +
    "\040\uffe7\041\uffe7\043\uffe7\050\uffe7\051\uffe7\052\111\054" +
    "\uffe7\055\uffe7\056\uffe7\060\uffe7\062\uffe7\063\112\064\uffe7" +
    "\065\110\066\uffe7\067\uffe7\001\002\000\034\007\051\010" +
    "\031\014\040\027\054\033\033\057\027\061\026\063\047" +
    "\065\022\071\037\072\030\073\044\075\034\001\002\000" +
    "\034\007\051\010\031\014\040\027\054\033\033\057\027" +
    "\061\026\063\047\065\022\071\037\072\030\073\044\075" +
    "\034\001\002\000\104\002\uffe6\004\uffe6\005\uffe6\011\uffe6" +
    "\014\uffe6\015\uffe6\017\uffe6\021\uffe6\022\uffe6\023\uffe6\024" +
    "\uffe6\026\uffe6\030\uffe6\031\uffe6\033\uffe6\036\uffe6\037\uffe6" +
    "\040\uffe6\041\uffe6\043\uffe6\050\uffe6\051\uffe6\052\111\054" +
    "\uffe6\055\uffe6\056\uffe6\060\uffe6\062\uffe6\063\112\064\uffe6" +
    "\065\110\066\uffe6\067\uffe6\001\002\000\104\002\uffe4\004" +
    "\uffe4\005\uffe4\011\uffe4\014\uffe4\015\uffe4\017\uffe4\021\uffe4" +
    "\022\uffe4\023\uffe4\024\uffe4\026\uffe4\030\uffe4\031\uffe4\033" +
    "\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\043\uffe4\050\uffe4" +
    "\051\uffe4\052\111\054\uffe4\055\uffe4\056\uffe4\060\uffe4\062" +
    "\uffe4\063\112\064\uffe4\065\110\066\uffe4\067\uffe4\001\002" +
    "\000\104\002\uffeb\004\uffeb\005\uffeb\011\uffeb\014\uffeb\015" +
    "\uffeb\017\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb\026\uffeb" +
    "\030\uffeb\031\uffeb\033\uffeb\036\uffeb\037\uffeb\040\uffeb\041" +
    "\uffeb\043\uffeb\050\uffeb\051\uffeb\052\111\054\uffeb\055\uffeb" +
    "\056\uffeb\060\uffeb\062\uffeb\063\112\064\uffeb\065\110\066" +
    "\uffeb\067\uffeb\001\002\000\104\002\uffe5\004\uffe5\005\uffe5" +
    "\011\uffe5\014\uffe5\015\uffe5\017\uffe5\021\uffe5\022\uffe5\023" +
    "\uffe5\024\uffe5\026\uffe5\030\uffe5\031\uffe5\033\uffe5\036\uffe5" +
    "\037\uffe5\040\uffe5\041\uffe5\043\uffe5\050\uffe5\051\uffe5\052" +
    "\111\054\uffe5\055\uffe5\056\uffe5\060\uffe5\062\uffe5\063\112" +
    "\064\uffe5\065\110\066\uffe5\067\uffe5\001\002\000\112\002" +
    "\uffda\004\uffda\005\uffda\011\uffda\014\uffda\015\uffda\017\uffda" +
    "\021\uffda\022\uffda\023\uffda\024\uffda\026\uffda\030\uffda\031" +
    "\uffda\033\uffda\036\uffda\037\uffda\040\uffda\041\uffda\043\uffda" +
    "\046\uffda\050\uffda\051\uffda\052\uffda\053\060\054\uffda\055" +
    "\uffda\056\uffda\060\uffda\062\uffda\063\uffda\064\uffda\065\uffda" +
    "\066\uffda\067\uffda\070\uffda\001\002\000\004\030\uff93\001" +
    "\002\000\004\033\uff89\001\002\000\004\030\201\001\002" +
    "\000\004\033\170\001\002\000\012\014\040\033\033\072" +
    "\030\073\044\001\002\000\004\030\uff8b\001\002\000\022" +
    "\002\ufff8\005\ufff8\011\ufff8\030\ufff8\033\ufff8\042\ufff8\051" +
    "\ufff8\053\ufff8\001\002\000\006\030\uff88\051\177\001\002" +
    "\000\010\030\uff86\051\uff86\053\175\001\002\000\012\014" +
    "\040\033\033\072\030\073\044\001\002\000\022\002\ufff7" +
    "\005\ufff7\011\ufff7\030\ufff7\033\ufff7\042\ufff7\051\ufff7\053" +
    "\ufff7\001\002\000\012\014\040\033\033\072\030\073\044" +
    "\001\002\000\004\030\uff87\001\002\000\020\006\204\012" +
    "\202\013\210\032\212\034\211\035\203\071\205\001\002" +
    "\000\006\020\uff8e\051\uff8e\001\002\000\006\020\uff8f\051" +
    "\uff8f\001\002\000\004\061\213\001\002\000\006\020\uff8d" +
    "\051\uff8d\001\002\000\006\020\uff98\051\uff98\001\002\000" +
    "\006\020\uff97\051\uff97\001\002\000\006\020\uff92\051\uff92" +
    "\001\002\000\006\020\uff91\051\uff91\001\002\000\006\020" +
    "\uff90\051\uff90\001\002\000\004\071\214\001\002\000\004" +
    "\067\215\001\002\000\006\020\uff8c\051\uff8c\001\002\000" +
    "\012\014\040\033\033\072\030\073\044\001\002\000\042" +
    "\007\051\010\031\014\040\026\025\027\054\033\033\051" +
    "\uffba\057\027\061\026\063\047\065\022\067\uffb9\071\037" +
    "\072\030\073\044\075\034\001\002\000\004\067\221\001" +
    "\002\000\112\002\uffd2\004\uffd2\005\uffd2\011\uffd2\014\uffd2" +
    "\015\uffd2\017\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\026" +
    "\uffd2\030\uffd2\031\uffd2\033\uffd2\036\uffd2\037\uffd2\040\uffd2" +
    "\041\uffd2\043\uffd2\046\uffd2\050\uffd2\051\uffd2\052\uffd2\053" +
    "\uffd2\054\uffd2\055\uffd2\056\uffd2\060\uffd2\062\uffd2\063\uffd2" +
    "\064\uffd2\065\uffd2\066\uffd2\067\uffd2\070\uffd2\001\002\000" +
    "\006\047\ufff5\061\ufff5\001\002\000\036\007\051\010\031" +
    "\014\040\026\025\027\054\033\033\057\027\061\026\063" +
    "\047\065\022\071\037\072\030\073\044\075\034\001\002" +
    "\000\006\005\075\050\076\001\002\000\010\005\uffbd\050" +
    "\uffbd\067\226\001\002\000\112\002\uffd1\004\uffd1\005\uffd1" +
    "\011\uffd1\014\uffd1\015\uffd1\017\uffd1\021\uffd1\022\uffd1\023" +
    "\uffd1\024\uffd1\026\uffd1\030\uffd1\031\uffd1\033\uffd1\036\uffd1" +
    "\037\uffd1\040\uffd1\041\uffd1\043\uffd1\046\uffd1\050\uffd1\051" +
    "\uffd1\052\uffd1\053\uffd1\054\uffd1\055\uffd1\056\uffd1\060\uffd1" +
    "\062\uffd1\063\uffd1\064\uffd1\065\uffd1\066\uffd1\067\uffd1\070" +
    "\uffd1\001\002\000\004\066\230\001\002\000\112\002\uffcf" +
    "\004\uffcf\005\uffcf\011\uffcf\014\uffcf\015\uffcf\017\uffcf\021" +
    "\uffcf\022\uffcf\023\uffcf\024\uffcf\026\uffcf\030\uffcf\031\uffcf" +
    "\033\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\043\uffcf\046" +
    "\uffcf\050\uffcf\051\uffcf\052\uffcf\053\uffcf\054\uffcf\055\uffcf" +
    "\056\uffcf\060\uffcf\062\uffcf\063\uffcf\064\uffcf\065\uffcf\066" +
    "\uffcf\067\uffcf\070\uffcf\001\002\000\004\067\232\001\002" +
    "\000\112\002\uffd0\004\uffd0\005\uffd0\011\uffd0\014\uffd0\015" +
    "\uffd0\017\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0\026\uffd0" +
    "\030\uffd0\031\uffd0\033\uffd0\036\uffd0\037\uffd0\040\uffd0\041" +
    "\uffd0\043\uffd0\046\uffd0\050\uffd0\051\uffd0\052\uffd0\053\uffd0" +
    "\054\uffd0\055\uffd0\056\uffd0\060\uffd0\062\uffd0\063\uffd0\064" +
    "\uffd0\065\uffd0\066\uffd0\067\uffd0\070\uffd0\001\002\000\052" +
    "\002\uffed\004\uffed\005\uffed\011\uffed\014\uffed\015\uffed\017" +
    "\uffed\024\uffed\030\uffed\031\uffed\033\uffed\036\uffed\037\uffed" +
    "\040\uffed\041\uffed\043\uffed\050\uffed\051\uffed\066\uffed\067" +
    "\uffed\001\002\000\112\002\uffdb\004\uffdb\005\uffdb\011\uffdb" +
    "\014\uffdb\015\uffdb\017\uffdb\021\uffdb\022\uffdb\023\uffdb\024" +
    "\uffdb\026\uffdb\030\uffdb\031\uffdb\033\uffdb\036\uffdb\037\uffdb" +
    "\040\uffdb\041\uffdb\043\uffdb\046\uffdb\050\uffdb\051\uffdb\052" +
    "\uffdb\053\060\054\uffdb\055\uffdb\056\uffdb\060\uffdb\062\uffdb" +
    "\063\uffdb\064\uffdb\065\uffdb\066\uffdb\067\uffdb\070\uffdb\001" +
    "\002\000\012\014\040\033\033\072\030\073\044\001\002" +
    "\000\012\002\uff85\011\uff85\033\uff85\042\uff85\001\002\000" +
    "\014\002\ufff4\011\ufff4\033\ufff4\042\ufff4\053\175\001\002" +
    "\000\012\002\uffab\011\uffab\033\uffab\042\241\001\002\000" +
    "\036\007\051\010\031\014\040\026\025\027\054\033\033" +
    "\057\027\061\026\063\047\065\022\071\037\072\030\073" +
    "\044\075\034\001\002\000\010\002\uffa9\011\246\033\uff82" +
    "\001\002\000\004\002\uffa8\001\002\000\004\033\247\001" +
    "\002\000\004\002\uffb2\001\002\000\004\033\uff81\001\002" +
    "\000\012\014\040\033\033\072\030\073\044\001\002\000" +
    "\006\002\uff80\051\253\001\002\000\004\002\uff83\001\002" +
    "\000\010\002\uff7e\051\uff7e\053\175\001\002\000\012\014" +
    "\040\033\033\072\030\073\044\001\002\000\004\002\uff7f" +
    "\001\002\000\010\002\uffaa\011\uffaa\033\uffaa\001\002\000" +
    "\014\002\uff84\005\075\011\uff84\033\uff84\050\076\001\002" +
    "\000\010\002\uffb3\005\075\050\076\001\002\000\004\002" +
    "\001\001\002\000\004\036\uffb0\001\002\000\010\024\uffa5" +
    "\036\uffa5\037\uffa5\001\002\000\010\024\266\036\uffa7\037" +
    "\264\001\002\000\012\014\040\033\033\072\030\073\044" +
    "\001\002\000\010\024\uffa4\036\uffa4\037\uffa4\001\002\000" +
    "\012\014\040\033\033\072\030\073\044\001\002\000\004" +
    "\005\271\001\002\000\006\005\uff9d\053\175\001\002\000" +
    "\040\007\051\010\031\014\040\026\025\027\054\033\033" +
    "\057\027\061\026\063\047\065\022\071\037\072\030\073" +
    "\044\075\034\076\273\001\002\000\016\024\uffa1\031\100" +
    "\036\uffa1\037\uffa1\043\101\051\274\001\002\000\012\024" +
    "\uffa1\036\uffa1\037\uffa1\051\274\001\002\000\012\014\040" +
    "\033\033\072\030\073\044\001\002\000\010\024\uffa3\036" +
    "\uffa3\037\uffa3\001\002\000\010\024\uffa0\036\uffa0\037\uffa0" +
    "\001\002\000\012\024\uff9f\036\uff9f\037\uff9f\051\303\001" +
    "\002\000\004\054\301\001\002\000\036\007\051\010\031" +
    "\014\040\026\025\027\054\033\033\057\027\061\026\063" +
    "\047\065\022\071\037\072\030\073\044\075\034\001\002" +
    "\000\016\024\uff9c\031\100\036\uff9c\037\uff9c\043\101\051" +
    "\uff9c\001\002\000\012\014\040\033\033\072\030\073\044" +
    "\001\002\000\010\024\uff9e\036\uff9e\037\uff9e\001\002\000" +
    "\010\024\uffa2\036\uffa2\037\uffa2\001\002\000\004\005\310" +
    "\001\002\000\006\005\uff99\053\175\001\002\000\040\007" +
    "\051\010\031\014\040\026\025\027\054\033\033\057\027" +
    "\061\026\063\047\065\022\071\037\072\030\073\044\075" +
    "\034\076\312\001\002\000\014\005\075\024\uff9a\036\uff9a" +
    "\037\uff9a\050\076\001\002\000\010\024\uff9b\036\uff9b\037" +
    "\uff9b\001\002\000\004\036\uffa6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\311\000\010\024\003\025\005\073\007\001\001\000" +
    "\002\001\001\000\012\043\261\044\264\045\262\066\260" +
    "\001\001\000\002\001\001\000\042\004\041\005\023\007" +
    "\256\011\040\013\042\014\051\015\047\016\045\017\044" +
    "\020\035\022\052\026\031\036\054\037\022\040\056\041" +
    "\055\001\001\000\002\001\001\000\012\003\013\054\012" +
    "\055\015\056\011\001\001\000\002\001\001\000\042\004" +
    "\041\005\023\007\034\011\040\013\042\014\051\015\047" +
    "\016\045\017\044\020\035\022\052\026\031\036\054\037" +
    "\022\040\056\041\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\003" +
    "\013\054\012\055\020\001\001\000\002\001\001\000\020" +
    "\005\023\022\233\026\031\036\054\037\022\040\056\041" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\005\023\011\040\013\042\014\051\015\047\016\232\022" +
    "\052\026\031\036\054\037\022\040\056\041\055\001\001" +
    "\000\046\004\041\005\023\007\070\010\071\011\040\013" +
    "\042\014\051\015\047\016\045\017\044\020\035\022\052" +
    "\026\031\036\054\037\022\040\056\041\055\064\230\001" +
    "\001\000\050\004\041\005\023\007\070\010\071\011\040" +
    "\013\042\014\051\015\047\016\045\017\044\020\035\022" +
    "\052\026\031\036\054\037\022\040\056\041\055\064\067" +
    "\065\226\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\051\166\062\163\063\165\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\005\023\022\162\026\031" +
    "\036\054\037\022\040\056\041\055\001\001\000\004\035" +
    "\136\001\001\000\040\005\023\011\040\013\042\014\051" +
    "\015\047\016\045\017\044\020\121\021\122\022\052\026" +
    "\031\036\054\037\022\040\056\041\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\036\054" +
    "\037\061\040\063\041\062\042\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\050\004\041\005\023\007\070\010" +
    "\071\011\040\013\042\014\051\015\047\016\045\017\044" +
    "\020\035\022\052\026\031\036\054\037\022\040\056\041" +
    "\055\064\067\065\066\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\046\004" +
    "\041\005\023\007\070\010\071\011\040\013\042\014\051" +
    "\015\047\016\045\017\044\020\035\022\052\026\031\036" +
    "\054\037\022\040\056\041\055\064\073\001\001\000\002" +
    "\001\001\000\012\036\054\037\105\040\056\041\055\001" +
    "\001\000\036\005\023\011\040\013\042\014\051\015\047" +
    "\016\045\017\044\020\076\022\052\026\031\036\054\037" +
    "\022\040\056\041\055\001\001\000\002\001\001\000\034" +
    "\005\023\011\040\013\042\014\051\015\047\016\045\017" +
    "\104\022\052\026\031\036\054\037\022\040\056\041\055" +
    "\001\001\000\034\005\023\011\040\013\042\014\051\015" +
    "\047\016\045\017\101\022\052\026\031\036\054\037\022" +
    "\040\056\041\055\001\001\000\002\001\001\000\032\005" +
    "\023\011\040\013\042\014\051\015\047\016\103\022\052" +
    "\026\031\036\054\037\022\040\056\041\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\005\023\011\040\013\120\022\052\026" +
    "\031\036\054\037\022\040\056\041\055\001\001\000\024" +
    "\005\023\011\040\013\117\022\052\026\031\036\054\037" +
    "\022\040\056\041\055\001\001\000\024\005\023\011\040" +
    "\013\112\022\052\026\031\036\054\037\022\040\056\041" +
    "\055\001\001\000\002\001\001\000\022\005\023\011\116" +
    "\022\052\026\031\036\054\037\022\040\056\041\055\001" +
    "\001\000\022\005\023\011\115\022\052\026\031\036\054" +
    "\037\022\040\056\041\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\072\123\001\001\000\006\006\124\074" +
    "\127\001\001\000\002\001\001\000\036\005\023\011\040" +
    "\013\042\014\051\015\047\016\045\017\044\020\133\022" +
    "\052\026\031\036\054\037\022\040\056\041\055\001\001" +
    "\000\036\005\023\011\040\013\042\014\051\015\047\016" +
    "\045\017\044\020\130\022\052\026\031\036\054\037\022" +
    "\040\056\041\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\005\023\011\040\013\042\014\051\015\047" +
    "\016\045\017\044\020\132\022\052\026\031\036\054\037" +
    "\022\040\056\041\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\005\023\011\040\013" +
    "\042\014\161\022\052\026\031\036\054\037\022\040\056" +
    "\041\055\001\001\000\026\005\023\011\040\013\042\014" +
    "\160\022\052\026\031\036\054\037\022\040\056\041\055" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\005\023" +
    "\011\040\013\042\014\153\022\052\026\031\036\054\037" +
    "\022\040\056\041\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\005\023\011\040\013\042\014\150\022" +
    "\052\026\031\036\054\037\022\040\056\041\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\005\023\011\040\013\042\014\157" +
    "\022\052\026\031\036\054\037\022\040\056\041\055\001" +
    "\001\000\026\005\023\011\040\013\042\014\156\022\052" +
    "\026\031\036\054\037\022\040\056\041\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\027\173" +
    "\036\054\037\171\040\056\041\055\052\172\070\170\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\036\054\037\175\040\056\041" +
    "\055\001\001\000\002\001\001\000\020\027\173\036\054" +
    "\037\171\040\056\041\055\052\172\070\177\001\001\000" +
    "\002\001\001\000\006\034\205\075\206\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\036\054\037\221" +
    "\040\056\041\055\001\001\000\050\004\041\005\023\007" +
    "\070\010\071\011\040\013\042\014\051\015\047\016\045" +
    "\017\044\020\035\022\052\026\031\036\054\037\022\040" +
    "\056\041\055\064\067\065\217\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\004\224\005" +
    "\023\007\223\011\040\013\042\014\051\015\047\016\045" +
    "\017\044\020\035\022\052\026\031\036\054\037\022\040" +
    "\056\041\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\027\236\030\235\031\237\036\054\037" +
    "\171\040\056\041\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\241\001\001\000\044\004\041\005" +
    "\023\007\255\011\040\012\254\013\042\014\051\015\047" +
    "\016\045\017\044\020\035\022\052\026\031\036\054\037" +
    "\022\040\056\041\055\001\001\000\010\047\243\057\242" +
    "\060\244\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\027\251\036\054" +
    "\037\171\040\056\041\055\050\247\071\250\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\027\251\036\054\037\171\040\056\041\055\050\247\071" +
    "\253\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\043\261\044\264\045\262" +
    "\066\312\001\001\000\016\027\306\033\305\036\054\037" +
    "\171\040\056\041\055\001\001\000\002\001\001\000\016" +
    "\027\267\032\266\036\054\037\171\040\056\041\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\005\023" +
    "\011\040\013\042\014\051\015\047\016\045\017\044\020" +
    "\271\022\052\026\031\036\054\037\022\040\056\041\055" +
    "\001\001\000\004\061\304\001\001\000\004\061\274\001" +
    "\001\000\016\036\054\037\277\040\056\041\055\046\276" +
    "\067\275\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\005\023\011\040" +
    "\013\042\014\051\015\047\016\045\017\044\020\301\022" +
    "\052\026\031\036\054\037\022\040\056\041\055\001\001" +
    "\000\002\001\001\000\016\036\054\037\277\040\056\041" +
    "\055\046\276\067\303\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\004" +
    "\041\005\023\007\310\011\040\013\042\014\051\015\047" +
    "\016\045\017\044\020\035\022\052\026\031\036\054\037" +
    "\022\040\056\041\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    scanner.init();

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

    return scanner.next_token();

    }


    // Generated from $Id: //open/mondrian-release/3.1/src/main/mondrian/olap/Parser.cup#3 $
    private Scanner scanner;
    private String queryString;
    private Connection mdxConnection;
    private FunTable funTable;
    private boolean load;
    private boolean strictValidation;

    /**
      * Recursively parses an expression.
      */
    Exp recursivelyParseExp(String s)
    {
        return new Parser().parseExpression(
            mdxConnection, s, false, funTable);
    }

    /**
      * Parses a string to create a {@link Query}.
      * Called only by {@link ConnectionBase#parseQuery}.
      */
    Query parseInternal(
        Connection mdxConnection,
        String queryString,
        boolean debug,
        FunTable funTable,
        boolean load,
        boolean strictValidation)
    {
        Symbol parse_tree = null;
        this.scanner = new StringScanner(queryString, debug);
        this.mdxConnection = mdxConnection;
        this.queryString = queryString;
        this.funTable = funTable;
        this.load = load;
        this.strictValidation = strictValidation;
        try {
            if (debug) {
                parse_tree = debug_parse();
            } else {
                parse_tree = parse();
            }
            return (Query) parse_tree.value;
        } catch (Exception e) {
            // "Error while parsing MDX statement '%1'"
            throw MondrianResource.instance().WhileParsingMdx.ex(
                queryString, e);
        } finally {
            this.scanner = null;
            this.mdxConnection = null;
            this.queryString = null;
            this.funTable = null;
        }
    }

    /**
      * Parses a string to create an {@link Exp}.
      * Called only by {@link ConnectionBase#parseExpression}.
      */
    Exp parseExpression(
        Connection mdxConnection,
        String queryString,
        boolean debug,
        FunTable funTable)
    {
        Symbol parse_tree = null;
        this.scanner = new PrefixScanner(
            debug,
            new StringScanner(queryString, debug),
            new int[] {ParserSym._VALUE_EXPRESSION});
        this.mdxConnection = mdxConnection;
        this.queryString = queryString;
        this.funTable = funTable;
        try {
            if (debug) {
                parse_tree = debug_parse();
            } else {
                parse_tree = parse();
            }
            return (Exp) parse_tree.value;
        } catch (Exception e) {
            // "Syntax error while parsing MDX expression '%1'"
            throw MondrianResource.instance().WhileParsingMdxExpression.ex(
                queryString, e);
        } finally {
            this.scanner = null;
            this.mdxConnection = null;
            this.queryString = null;
            this.funTable = null;
        }
    }

    /**
      * Scanner which returns a list of pre-programmed tokens, then switches
      * to a parent scanner.
      */
    private static class PrefixScanner extends Scanner {
        private final Scanner parent;
        private final int tokens[];
        private int i;

        PrefixScanner(boolean debug, Scanner parent, int[] tokens) {
            super(debug);
            this.parent = parent;
            this.tokens = tokens;
        }

        public void init() throws java.io.IOException {
            i = 0;
            parent.init();
        }

        public Symbol next_token() throws java.io.IOException {
            if (i < tokens.length) {
                return new Symbol(tokens[i++], 0, 0, null);
            }
            return parent.next_token();
        }

        void getLocation(Symbol symbol, int[] loc) {
            parent.getLocation(symbol, loc);
        }
    }

    /**
     * Creates a {@link Query} object.
     * Override this function to make your kind of query.
     */
    protected Query makeQuery(
        Formula[] formulae, QueryAxis[] axes,
        String cube, Exp slicer, QueryPart[] cellProps)
    {
        final QueryAxis slicerAxis =
            slicer == null
                ? null
                : new QueryAxis(
                    false, slicer, AxisOrdinal.StandardAxisOrdinal.SLICER,
                    QueryAxis.SubtotalVisibility.Undefined, new Id[0]);
        return new Query(
            mdxConnection, formulae, axes, cube, slicerAxis, cellProps, load,
            strictValidation);
    }

    // Override lr_parser methods for NLS.  With this error handling scheme,
    // all errors are fatal.
    public void report_fatal_error(
        String   message,
        Object   info)
        throws java.lang.Exception
    {
        done_parsing();
        try {
            report_error(message, info);
        } catch (Throwable e) {
            // "MDX parser cannot recover from previous error(s)"
            throw MondrianResource.instance().MdxFatalError.ex(e);
        }
    }

    // override lr_parser method
    public void report_error(String message, Object info)
    {
        // "Error: %1"
        throw MondrianResource.instance().MdxError.ex(message);
    }

    // override lr_parser method
    public void syntax_error(Symbol cur_token)
    {
        String s = cur_token.value.toString();
        if (cur_token.left != -1) {
            int loc[] = new int[2];
            scanner.getLocation(cur_token, loc);
            // "Syntax error at line %2, column %3, token '%1'"
            throw MondrianResource.instance().MdxSyntaxErrorAt.ex(
                s, Integer.toString(loc[0] + 1), Integer.toString(loc[1] + 1));
        } else {
            // "Syntax error at token '%1'"
            throw MondrianResource.instance().MdxSyntaxError.ex(s);
        }
    }

    public void unrecovered_syntax_error(Symbol cur_token)
        throws java.lang.Exception
    {
        // "Couldn't repair and continue parse"
        String sFatalSyntaxError =
            MondrianResource.instance().MdxFatalSyntaxError.str();
        report_fatal_error(sFatalSyntaxError, cur_token);
    }

    /**
     * Returns whether the given identifier can possibly the name of an operator
     * with property syntax.
     *
     * <p>For example, <code>isFunCall("ORDINAL")</code>
     * returns true because there is a "&lt;Level&gt;.Ordinal" property.</p>
     */
    protected boolean isFunCall(String s) {
        return funTable.isProperty(s);
    }

    static Id[] toIdArray(List<Id> idList) {
        if (idList == null || idList.size() == 0) {
            return EmptyIdArray;
        } else {
            return idList.toArray(new Id[idList.size()]);
        }
    }

    static Exp[] toExpArray(List<Exp> expList) {
        if (expList == null || expList.size() == 0) {
            return EmptyExpArray;
        } else {
            return expList.toArray(new Exp[expList.size()]);
        }
    }

    static Formula[] toFormulaArray(List<Formula> formulaList) {
        if (formulaList == null || formulaList.size() == 0) {
            return EmptyFormulaArray;
        } else {
            return formulaList.toArray(new Formula[formulaList.size()]);
        }
    }

    static MemberProperty[] toMemberPropertyArray(List<MemberProperty> mpList) {
        if (mpList == null || mpList.size() == 0) {
            return EmptyMemberPropertyArray;
        } else {
            return mpList.toArray(new MemberProperty[mpList.size()]);
        }
    }

    static QueryPart[] toQueryPartArray(List<QueryPart> qpList) {
        if (qpList == null || qpList.size() == 0) {
            return EmptyQueryPartArray;
        } else {
            return qpList.toArray(new QueryPart[qpList.size()]);
        }
    }

    static QueryAxis[] toQueryAxisArray(List<QueryAxis> qpList) {
        if (qpList == null || qpList.size() == 0) {
            return EmptyQueryAxisArray;
        } else {
            return qpList.toArray(new QueryAxis[qpList.size()]);
        }
    }

    private static final MemberProperty[] EmptyMemberPropertyArray =
        new MemberProperty[0];
    private static final Exp[] EmptyExpArray = new Exp[0];
    private static final Formula[] EmptyFormulaArray = new Formula[0];
    private static final Id[] EmptyIdArray = new Id[0];
    private static final QueryPart[] EmptyQueryPartArray = new QueryPart[0];
    private static final QueryAxis[] EmptyQueryAxisArray = new QueryAxis[0];

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // cell_property ::= compound_id 
            {
              Object RESULT = null;

		// Default action for single-symbol production
		RESULT = (Id)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top)).value;
              CUP$Parser$result = new java_cup.runtime.Symbol(38/*cell_property*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // cell_property_list ::= cell_property COMMA cell_property_list 
            {
              List RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int p1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		List p1 = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
        p1.add(0, new CellProperty(p));
        RESULT = p1;
    
              CUP$Parser$result = new java_cup.runtime.Symbol(55/*cell_property_list*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // cell_property_list ::= cell_property 
            {
              List RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
        RESULT = new LinkedList();
        RESULT.add(new CellProperty(p));
    
              CUP$Parser$result = new java_cup.runtime.Symbol(55/*cell_property_list*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // cell_opt ::= CELL 
            {
              Object RESULT = null;

		// Default action for single-symbol production
		RESULT = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top)).value;
              CUP$Parser$result = new java_cup.runtime.Symbol(37/*cell_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // cell_opt ::= 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(37/*cell_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // cell_props ::= cell_opt PROPERTIES cell_property_list 
            {
              List RESULT = null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		List p1 = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = p1;
        
              CUP$Parser$result = new java_cup.runtime.Symbol(45/*cell_props*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // slicer_specification ::= expression 
            {
              Exp RESULT = null;

		// Default action for single-symbol production
		RESULT = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top)).value;
              CUP$Parser$result = new java_cup.runtime.Symbol(8/*slicer_specification*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // cube_specification ::= cube_name 
            {
              Id RESULT = null;

		// Default action for single-symbol production
		RESULT = (Id)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top)).value;
              CUP$Parser$result = new java_cup.runtime.Symbol(23/*cube_specification*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // property ::= compound_id 
            {
              Object RESULT = null;

		// Default action for single-symbol production
		RESULT = (Id)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top)).value;
              CUP$Parser$result = new java_cup.runtime.Symbol(40/*property*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // property_list ::= property COMMA property_list 
            {
              List RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		List pl = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            pl.add(0, p);
            RESULT = pl;
        
              CUP$Parser$result = new java_cup.runtime.Symbol(54/*property_list*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // property_list ::= property 
            {
              List RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = new LinkedList();
            RESULT.add(p);
        
              CUP$Parser$result = new java_cup.runtime.Symbol(54/*property_list*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // dimension_opt ::= DIMENSION 
            {
              Object RESULT = null;

		// Default action for single-symbol production
		RESULT = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top)).value;
              CUP$Parser$result = new java_cup.runtime.Symbol(39/*dimension_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // dimension_opt ::= 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(39/*dimension_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // dim_props ::= dimension_opt PROPERTIES property_list 
            {
              List RESULT = null;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		List pl = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
        RESULT = pl;
    
              CUP$Parser$result = new java_cup.runtime.Symbol(48/*dim_props*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // axis_number ::= AXIS LPAREN NUMBER RPAREN 
            {
              Double RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            RESULT = n;
        
              CUP$Parser$result = new java_cup.runtime.Symbol(59/*axis_number*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // axis_number ::= NUMBER 
            {
              Double RESULT = null;

		// Default action for single-symbol production
		RESULT = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top)).value;
              CUP$Parser$result = new java_cup.runtime.Symbol(59/*axis_number*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // axis_name ::= CHAPTERS 
            {
              AxisOrdinal.StandardAxisOrdinal RESULT = null;
		
            RESULT = AxisOrdinal.StandardAxisOrdinal.CHAPTERS;
        
              CUP$Parser$result = new java_cup.runtime.Symbol(26/*axis_name*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // axis_name ::= SECTIONS 
            {
              AxisOrdinal.StandardAxisOrdinal RESULT = null;
		
            RESULT = AxisOrdinal.StandardAxisOrdinal.SECTIONS;
        
              CUP$Parser$result = new java_cup.runtime.Symbol(26/*axis_name*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // axis_name ::= PAGES 
            {
              AxisOrdinal.StandardAxisOrdinal RESULT = null;
		
            RESULT = AxisOrdinal.StandardAxisOrdinal.PAGES;
        
              CUP$Parser$result = new java_cup.runtime.Symbol(26/*axis_name*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // axis_name ::= ROWS 
            {
              AxisOrdinal.StandardAxisOrdinal RESULT = null;
		
            RESULT = AxisOrdinal.StandardAxisOrdinal.ROWS;
        
              CUP$Parser$result = new java_cup.runtime.Symbol(26/*axis_name*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // axis_name ::= COLUMNS 
            {
              AxisOrdinal.StandardAxisOrdinal RESULT = null;
		
            RESULT = AxisOrdinal.StandardAxisOrdinal.COLUMNS;
        
              CUP$Parser$result = new java_cup.runtime.Symbol(26/*axis_name*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // dim_props_opt ::= dim_props 
            {
              List RESULT = null;

		// Default action for single-symbol production
		RESULT = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top)).value;
              CUP$Parser$result = new java_cup.runtime.Symbol(49/*dim_props_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // dim_props_opt ::= 
            {
              List RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(49/*dim_props_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // non_empty_opt ::= NON EMPTY 
            {
              Boolean RESULT = null;
		
            RESULT = Boolean.TRUE;
        
              CUP$Parser$result = new java_cup.runtime.Symbol(42/*non_empty_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // non_empty_opt ::= 
            {
              Boolean RESULT = null;
		
            RESULT = Boolean.FALSE;
        
              CUP$Parser$result = new java_cup.runtime.Symbol(42/*non_empty_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // axis_specification ::= non_empty_opt expression dim_props_opt ON axis_number 
            {
              QueryAxis RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List dp = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            double d = n.doubleValue();
            int index = (int)d;

            // AxisOrdinal values go from -2 to 4 for standard axis, but higher
            // ordinals are allowed. The negative values represent
            // special cases, so are ignored.
            if (index < 0 || index != d) {
                throw MondrianResource.instance().InvalidAxis.ex(
                    d);
            }

            AxisOrdinal axis =
                AxisOrdinal.StandardAxisOrdinal.forLogicalOrdinal(index);
            RESULT =
                new QueryAxis(
                    b.booleanValue(), s, axis,
                    QueryAxis.SubtotalVisibility.Undefined,
                    Parser.toIdArray(dp));
        
              CUP$Parser$result = new java_cup.runtime.Symbol(1/*axis_specification*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // axis_specification ::= non_empty_opt expression dim_props_opt ON axis_name 
            {
              QueryAxis RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List dp = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		AxisOrdinal.StandardAxisOrdinal a = (AxisOrdinal.StandardAxisOrdinal)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = new QueryAxis(
                    b.booleanValue(), s, a,
                    QueryAxis.SubtotalVisibility.Undefined,
                    Parser.toIdArray(dp));
        
              CUP$Parser$result = new java_cup.runtime.Symbol(1/*axis_specification*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // set_name ::= compound_id 
            {
              Id RESULT = null;

		// Default action for single-symbol production
		RESULT = (Id)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top)).value;
              CUP$Parser$result = new java_cup.runtime.Symbol(25/*set_name*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // set_specification ::= SET set_name AS expression 
            {
              Formula RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Id n = (Id)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = new Formula(n, e);
        
              CUP$Parser$result = new java_cup.runtime.Symbol(34/*set_specification*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // set_specification ::= SET set_name AS FORMULA_STRING 
            {
              Formula RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Id n = (Id)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            Exp e = parser.recursivelyParseExp(s);
            RESULT = new Formula(n, e);
        
              CUP$Parser$result = new java_cup.runtime.Symbol(34/*set_specification*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // member_property_definition ::= identifier EQ value_expression 
            {
              MemberProperty RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Id.Segment id = (Id.Segment)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = new MemberProperty(id.name, e);
        
              CUP$Parser$result = new java_cup.runtime.Symbol(36/*member_property_definition*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // member_name ::= compound_id 
            {
              Id RESULT = null;

		// Default action for single-symbol production
		RESULT = (Id)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top)).value;
              CUP$Parser$result = new java_cup.runtime.Symbol(24/*member_name*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // member_property_def_list ::= member_property_definition COMMA member_property_def_list 
            {
              List RESULT = null;
		int hdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int hdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		MemberProperty hd = (MemberProperty)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		List tl = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = tl;
            RESULT.add(0, hd);
        
              CUP$Parser$result = new java_cup.runtime.Symbol(53/*member_property_def_list*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // member_property_def_list ::= member_property_definition 
            {
              List RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		MemberProperty m = (MemberProperty)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = new LinkedList();
            RESULT.add(m);
        
              CUP$Parser$result = new java_cup.runtime.Symbol(53/*member_property_def_list*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // comma_member_property_def_list_opt ::= COMMA member_property_def_list 
            {
              List RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		List l = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = l;
        
              CUP$Parser$result = new java_cup.runtime.Symbol(47/*comma_member_property_def_list_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // comma_member_property_def_list_opt ::= 
            {
              List RESULT = null;
		
            RESULT = new LinkedList();
        
              CUP$Parser$result = new java_cup.runtime.Symbol(47/*comma_member_property_def_list_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // member_specification ::= MEMBER member_name AS value_expression comma_member_property_def_list_opt 
            {
              Formula RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Id m = (Id)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		List l = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = new Formula(
                m,
                e,
                Parser.toMemberPropertyArray(l));
        
              CUP$Parser$result = new java_cup.runtime.Symbol(33/*member_specification*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // member_specification ::= MEMBER member_name AS FORMULA_STRING comma_member_property_def_list_opt 
            {
              Formula RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Id m = (Id)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		List l = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            Exp e = parser.recursivelyParseExp(s);
            RESULT = new Formula(
                m,
                e,
                Parser.toMemberPropertyArray(l));
        
              CUP$Parser$result = new java_cup.runtime.Symbol(33/*member_specification*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // single_formula_specification ::= set_specification 
            {
              Formula RESULT = null;

		// Default action for single-symbol production
		RESULT = (Formula)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top)).value;
              CUP$Parser$result = new java_cup.runtime.Symbol(35/*single_formula_specification*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // single_formula_specification ::= member_specification 
            {
              Formula RESULT = null;

		// Default action for single-symbol production
		RESULT = (Formula)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top)).value;
              CUP$Parser$result = new java_cup.runtime.Symbol(35/*single_formula_specification*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // formula_specification ::= single_formula_specification formula_specification 
            {
              List RESULT = null;
		int hdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int hdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Formula hd = (Formula)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		List tl = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            tl.add(0, hd);
            RESULT = tl;
        
              CUP$Parser$result = new java_cup.runtime.Symbol(52/*formula_specification*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // formula_specification ::= single_formula_specification 
            {
              List RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Formula e = (Formula)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = new LinkedList();
            RESULT.add(e);
        
              CUP$Parser$result = new java_cup.runtime.Symbol(52/*formula_specification*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // cell_props_opt ::= cell_props 
            {
              List RESULT = null;

		// Default action for single-symbol production
		RESULT = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top)).value;
              CUP$Parser$result = new java_cup.runtime.Symbol(46/*cell_props_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // cell_props_opt ::= 
            {
              List RESULT = null;
		
            RESULT = new LinkedList();
        
              CUP$Parser$result = new java_cup.runtime.Symbol(46/*cell_props_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // where_clause_opt ::= WHERE slicer_specification 
            {
              Exp RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = s;
        
              CUP$Parser$result = new java_cup.runtime.Symbol(17/*where_clause_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // where_clause_opt ::= 
            {
              Exp RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(17/*where_clause_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // axis_specification_list ::= axis_specification COMMA axis_specification_list 
            {
              List RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		QueryAxis e = (QueryAxis)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            list.add(0, e);
            RESULT = list;
        
              CUP$Parser$result = new java_cup.runtime.Symbol(43/*axis_specification_list*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // axis_specification_list ::= axis_specification 
            {
              List RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		QueryAxis i = (QueryAxis)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = new LinkedList();
            RESULT.add(i);
        
              CUP$Parser$result = new java_cup.runtime.Symbol(43/*axis_specification_list*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // axis_specification_list_opt ::= axis_specification_list 
            {
              List RESULT = null;

		// Default action for single-symbol production
		RESULT = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top)).value;
              CUP$Parser$result = new java_cup.runtime.Symbol(44/*axis_specification_list_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // axis_specification_list_opt ::= 
            {
              List RESULT = null;
		
            RESULT = new LinkedList();
        
              CUP$Parser$result = new java_cup.runtime.Symbol(44/*axis_specification_list_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // with_formula_specification_opt ::= WITH formula_specification 
            {
              List RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		List f = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = f;
        
              CUP$Parser$result = new java_cup.runtime.Symbol(57/*with_formula_specification_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // with_formula_specification_opt ::= 
            {
              List RESULT = null;
		
            RESULT = new LinkedList();
        
              CUP$Parser$result = new java_cup.runtime.Symbol(57/*with_formula_specification_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // select_statement ::= with_formula_specification_opt SELECT axis_specification_list_opt FROM cube_specification where_clause_opt cell_props_opt 
            {
              QueryPart RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		List f = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List a = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Id c = (Id)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp w = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		List cp = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            Parser parser = (Parser) CUP$Parser$parser;
            // We want 'Sales', not '[Sales]', and can't handle 'Schema.Sales'
            // yet.
            String cubeName = c.getElement(0).name;
            RESULT = parser.makeQuery(
                Parser.toFormulaArray(f),
                Parser.toQueryAxisArray(a),
                cubeName,
                w,
                Parser.toQueryPartArray(cp));
        
              CUP$Parser$result = new java_cup.runtime.Symbol(18/*select_statement*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // statement ::= _VALUE_EXPRESSION expression 
            {
              QueryPart RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = (QueryPart) e;
        
              CUP$Parser$result = new java_cup.runtime.Symbol(19/*statement*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // statement ::= select_statement 
            {
              QueryPart RESULT = null;

		// Default action for single-symbol production
		RESULT = (QueryPart)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top)).value;
              CUP$Parser$result = new java_cup.runtime.Symbol(19/*statement*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // aliasedExpression ::= expression AS identifier 
            {
              UnresolvedFunCall RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Id.Segment i = (Id.Segment)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            Id id = new Id(i);
            RESULT =
                new UnresolvedFunCall("AS", Syntax.Infix, new Exp[] {x, id});
        
              CUP$Parser$result = new java_cup.runtime.Symbol(2/*aliasedExpression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // exp_list ::= expression_or_empty COMMA exp_list 
            {
              List RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            list.add(0, e); RESULT = list;
        
              CUP$Parser$result = new java_cup.runtime.Symbol(50/*exp_list*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // exp_list ::= expression 
            {
              List RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = new LinkedList();
            RESULT.add(e);
        
              CUP$Parser$result = new java_cup.runtime.Symbol(50/*exp_list*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // exp_list_opt ::= exp_list 
            {
              List RESULT = null;

		// Default action for single-symbol production
		RESULT = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top)).value;
              CUP$Parser$result = new java_cup.runtime.Symbol(51/*exp_list_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // exp_list_opt ::= 
            {
              List RESULT = null;
		
            RESULT = new LinkedList();
        
              CUP$Parser$result = new java_cup.runtime.Symbol(51/*exp_list_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expression_or_empty ::= 
            {
              Exp RESULT = null;
		
            RESULT = new UnresolvedFunCall("", Syntax.Empty, new Exp[] {});
        
              CUP$Parser$result = new java_cup.runtime.Symbol(6/*expression_or_empty*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expression_or_empty ::= expression 
            {
              Exp RESULT = null;

		// Default action for single-symbol production
		RESULT = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top)).value;
              CUP$Parser$result = new java_cup.runtime.Symbol(6/*expression_or_empty*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expression ::= value_expression 
            {
              Exp RESULT = null;

		// Default action for single-symbol production
		RESULT = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top)).value;
              CUP$Parser$result = new java_cup.runtime.Symbol(5/*expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expression ::= aliasedExpression 
            {
              Exp RESULT = null;

		// Default action for single-symbol production
		RESULT = (UnresolvedFunCall)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top)).value;
              CUP$Parser$result = new java_cup.runtime.Symbol(5/*expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expression ::= expression COLON value_expression 
            {
              Exp RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 // range yields set
            RESULT = new UnresolvedFunCall(":", Syntax.Infix, new Exp[] {x, y});
        
              CUP$Parser$result = new java_cup.runtime.Symbol(5/*expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // comp_op ::= GE 
            {
              String RESULT = null;
		
            RESULT = ">=";
        
              CUP$Parser$result = new java_cup.runtime.Symbol(27/*comp_op*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // comp_op ::= LE 
            {
              String RESULT = null;
		
            RESULT = "<=";
        
              CUP$Parser$result = new java_cup.runtime.Symbol(27/*comp_op*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // comp_op ::= GT 
            {
              String RESULT = null;
		
            RESULT = ">";
        
              CUP$Parser$result = new java_cup.runtime.Symbol(27/*comp_op*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // comp_op ::= LT 
            {
              String RESULT = null;
		
            RESULT = "<";
        
              CUP$Parser$result = new java_cup.runtime.Symbol(27/*comp_op*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // comp_op ::= NE 
            {
              String RESULT = null;
		
            RESULT = "<>";
        
              CUP$Parser$result = new java_cup.runtime.Symbol(27/*comp_op*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // comp_op ::= EQ 
            {
              String RESULT = null;
		
            RESULT = "=";
        
              CUP$Parser$result = new java_cup.runtime.Symbol(27/*comp_op*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // else_clause_opt ::= ELSE value_expression 
            {
              Exp RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = x;
        
              CUP$Parser$result = new java_cup.runtime.Symbol(4/*else_clause_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // else_clause_opt ::= 
            {
              Exp RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(4/*else_clause_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // when_clause ::= WHEN value_expression THEN value_expression 
            {
              Exp[] RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = new Exp[] {x, y};
        
              CUP$Parser$result = new java_cup.runtime.Symbol(58/*when_clause*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // when_list ::= when_list when_clause 
            {
              List RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List x = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Exp[] y = (Exp[])((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = x;
            x.add(y);
        
              CUP$Parser$result = new java_cup.runtime.Symbol(56/*when_list*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // when_list ::= 
            {
              List RESULT = null;
		
            RESULT = new ArrayList();
        
              CUP$Parser$result = new java_cup.runtime.Symbol(56/*when_list*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // value_expression_opt ::= value_expression 
            {
              Exp RESULT = null;

		// Default action for single-symbol production
		RESULT = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top)).value;
              CUP$Parser$result = new java_cup.runtime.Symbol(15/*value_expression_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // value_expression_opt ::= 
            {
              Exp RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(15/*value_expression_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // case_expression ::= CASE value_expression_opt when_list else_clause_opt END 
            {
              Exp RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List y = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp z = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            List v = new ArrayList();
            if (x != null) {
                v.add(x);
            }
            for (int i = 0; i < y.size(); i++) {
                Exp[] exps = (Exp[]) y.get(i);
                Util.assertTrue(exps.length == 2);
                v.add(exps[0]);
                v.add(exps[1]);
            }
            if (z != null) {
                v.add(z);
            }
            if (x == null) {
                RESULT = new UnresolvedFunCall(
                    "_CaseTest", Syntax.Case, Parser.toExpArray(v));
            } else {
                RESULT = new UnresolvedFunCall(
                    "_CaseMatch", Syntax.Case, Parser.toExpArray(v));
            }
        
              CUP$Parser$result = new java_cup.runtime.Symbol(3/*case_expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // value_expression_primary ::= case_expression 
            {
              Exp RESULT = null;

		// Default action for single-symbol production
		RESULT = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top)).value;
              CUP$Parser$result = new java_cup.runtime.Symbol(16/*value_expression_primary*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // value_expression_primary ::= NULL 
            {
              Exp RESULT = null;
		
            RESULT = Literal.nullValue;
        
              CUP$Parser$result = new java_cup.runtime.Symbol(16/*value_expression_primary*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // value_expression_primary ::= LBRACE exp_list_opt RBRACE 
            {
              Exp RESULT = null;
		int lisleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lisright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List lis = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 // set built from sets/tuples
            RESULT = new UnresolvedFunCall(
                "{}", Syntax.Braces, Parser.toExpArray(lis));
        
              CUP$Parser$result = new java_cup.runtime.Symbol(16/*value_expression_primary*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // value_expression_primary ::= LPAREN exp_list RPAREN 
            {
              Exp RESULT = null;
		int lisleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lisright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List lis = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            // Whereas ([Sales],[Time]) and () are tuples, ([Sales]) and (5)
            // are just expressions.
            RESULT = new UnresolvedFunCall(
                "()", Syntax.Parentheses, Parser.toExpArray(lis));
        
              CUP$Parser$result = new java_cup.runtime.Symbol(16/*value_expression_primary*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // value_expression_primary ::= CAST LPAREN aliasedExpression RPAREN 
            {
              Exp RESULT = null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		UnresolvedFunCall ae = (UnresolvedFunCall)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            assert ae.getArgCount() == 2;
            Exp e = ae.getArg(0);
            Id.Segment t = ((Id) ae.getArg(1)).getSegments().get(0);
            RESULT = new UnresolvedFunCall(
                "CAST", Syntax.Cast, new Exp[] {
                    e,
                    Literal.createSymbol(t.name)});
        
              CUP$Parser$result = new java_cup.runtime.Symbol(16/*value_expression_primary*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // value_expression_primary ::= bang_compound_id LPAREN exp_list_opt RPAREN 
            {
              Exp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Id i = (Id)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lisleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lisright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List lis = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            RESULT = new UnresolvedFunCall(
                i.getSegments().get(i.getSegments().size() - 1).name,
                Syntax.Function, Parser.toExpArray(lis));
        
              CUP$Parser$result = new java_cup.runtime.Symbol(16/*value_expression_primary*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // value_expression_primary ::= value_expression_primary DOT identifier LPAREN exp_list_opt RPAREN 
            {
              Exp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Exp i = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Id.Segment j = (Id.Segment)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lisleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lisright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List lis = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            lis.add(0, i);
            RESULT = new UnresolvedFunCall(
                j.name, Syntax.Method, Parser.toExpArray(lis));
        
              CUP$Parser$result = new java_cup.runtime.Symbol(16/*value_expression_primary*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // value_expression_primary ::= value_expression_primary DOT amp_quoted_identifier 
            {
              Exp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp i = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Id.Segment j = (Id.Segment)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            if (i instanceof Id) {
                RESULT = ((Id) i).append(j);
            } else {
                RESULT = new UnresolvedFunCall(
                    j.name, Syntax.AmpersandQuotedProperty, new Exp[] {i});
            }
        
              CUP$Parser$result = new java_cup.runtime.Symbol(16/*value_expression_primary*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // value_expression_primary ::= value_expression_primary DOT quoted_identifier 
            {
              Exp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp i = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Id.Segment j = (Id.Segment)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            if (i instanceof Id) {
                RESULT = ((Id) i).append(j);
            } else {
                RESULT = new UnresolvedFunCall(
                    j.name, Syntax.QuotedProperty, new Exp[] {i});
            }
        
              CUP$Parser$result = new java_cup.runtime.Symbol(16/*value_expression_primary*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // value_expression_primary ::= value_expression_primary DOT unquoted_identifier 
            {
              Exp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp i = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Id.Segment j = (Id.Segment)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            if (i instanceof Id && !parser.isFunCall(j.name)) {
                RESULT = ((Id) i).append(j);
            } else {
                RESULT =
                    new UnresolvedFunCall(
                        j.name, Syntax.Property, new Exp[] {i});
            }
        
              CUP$Parser$result = new java_cup.runtime.Symbol(16/*value_expression_primary*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // value_expression_primary ::= identifier 
            {
              Exp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Id.Segment i = (Id.Segment)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = new Id(i);
        
              CUP$Parser$result = new java_cup.runtime.Symbol(16/*value_expression_primary*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // value_expression_primary ::= NUMBER 
            {
              Exp RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = Literal.create(d);
        
              CUP$Parser$result = new java_cup.runtime.Symbol(16/*value_expression_primary*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // value_expression_primary ::= STRING 
            {
              Exp RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = Literal.createString(s);
        
              CUP$Parser$result = new java_cup.runtime.Symbol(16/*value_expression_primary*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // factor ::= MINUS value_expression_primary 
            {
              Exp RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = new UnresolvedFunCall("-", Syntax.Prefix, new Exp[] {p});
        
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*factor*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // factor ::= PLUS value_expression_primary 
            {
              Exp RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = p;
        
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*factor*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // factor ::= value_expression_primary 
            {
              Exp RESULT = null;

		// Default action for single-symbol production
		RESULT = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top)).value;
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*factor*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // term ::= term SOLIDUS factor 
            {
              Exp RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = new UnresolvedFunCall("/", Syntax.Infix, new Exp[] {x, y});
        
              CUP$Parser$result = new java_cup.runtime.Symbol(9/*term*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // term ::= term ASTERISK factor 
            {
              Exp RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = new UnresolvedFunCall("*", Syntax.Infix, new Exp[] {x, y});
        
              CUP$Parser$result = new java_cup.runtime.Symbol(9/*term*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // term ::= factor 
            {
              Exp RESULT = null;

		// Default action for single-symbol production
		RESULT = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top)).value;
              CUP$Parser$result = new java_cup.runtime.Symbol(9/*term*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // term2 ::= term2 CONCAT term 
            {
              Exp RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT =
                 new UnresolvedFunCall("||", Syntax.Infix, new Exp[] {x, y});
        
              CUP$Parser$result = new java_cup.runtime.Symbol(10/*term2*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // term2 ::= term2 MINUS term 
            {
              Exp RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = new UnresolvedFunCall("-", Syntax.Infix, new Exp[] {x, y});
        
              CUP$Parser$result = new java_cup.runtime.Symbol(10/*term2*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // term2 ::= term2 PLUS term 
            {
              Exp RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = new UnresolvedFunCall("+", Syntax.Infix, new Exp[] {x, y});
        
              CUP$Parser$result = new java_cup.runtime.Symbol(10/*term2*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // term2 ::= term 
            {
              Exp RESULT = null;

		// Default action for single-symbol production
		RESULT = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top)).value;
              CUP$Parser$result = new java_cup.runtime.Symbol(10/*term2*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // term3 ::= term3 NOT IN term2 
            {
              Exp RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = new UnresolvedFunCall(
                "NOT", Syntax.Prefix, new Exp[] {
                    new UnresolvedFunCall(
                        "IN", Syntax.Infix, new Exp[] {x, y})});
        
              CUP$Parser$result = new java_cup.runtime.Symbol(11/*term3*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // term3 ::= term3 IN term2 
            {
              Exp RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT =
                new UnresolvedFunCall("IN", Syntax.Infix, new Exp[] {x, y});
        
              CUP$Parser$result = new java_cup.runtime.Symbol(11/*term3*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // term3 ::= term3 NOT MATCHES term2 
            {
              Exp RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = new UnresolvedFunCall(
                "NOT", Syntax.Prefix, new Exp[] {
                    new UnresolvedFunCall(
                        "MATCHES", Syntax.Infix, new Exp[] {x, y})});
        
              CUP$Parser$result = new java_cup.runtime.Symbol(11/*term3*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // term3 ::= term3 MATCHES term2 
            {
              Exp RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT =
                new UnresolvedFunCall(
                    "MATCHES", Syntax.Infix, new Exp[] {x, y});
        
              CUP$Parser$result = new java_cup.runtime.Symbol(11/*term3*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // term3 ::= term3 IS EMPTY 
            {
              Exp RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
            RESULT =
                new UnresolvedFunCall(
                    "IS EMPTY", Syntax.Postfix, new Exp[] {x});
        
              CUP$Parser$result = new java_cup.runtime.Symbol(11/*term3*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // term3 ::= term3 IS term2 
            {
              Exp RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            // e.g. "x IS y"; but "x IS NULL" is handled elsewhere
            RESULT =
                new UnresolvedFunCall("IS", Syntax.Infix, new Exp[] {x, y});
        
              CUP$Parser$result = new java_cup.runtime.Symbol(11/*term3*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // term3 ::= term3 IS NULL 
            {
              Exp RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
            RESULT =
                new UnresolvedFunCall("IS NULL", Syntax.Postfix, new Exp[] {x});
        
              CUP$Parser$result = new java_cup.runtime.Symbol(11/*term3*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // term3 ::= term3 comp_op term2 
            {
              Exp RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 // e.g. "1 < 5"
            RESULT = new UnresolvedFunCall(op, Syntax.Infix, new Exp[] {x, y});
        
              CUP$Parser$result = new java_cup.runtime.Symbol(11/*term3*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // term3 ::= term2 
            {
              Exp RESULT = null;

		// Default action for single-symbol production
		RESULT = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top)).value;
              CUP$Parser$result = new java_cup.runtime.Symbol(11/*term3*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // term4 ::= NOT term4 
            {
              Exp RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = new UnresolvedFunCall("NOT", Syntax.Prefix, new Exp[] {p});
        
              CUP$Parser$result = new java_cup.runtime.Symbol(12/*term4*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // term4 ::= term3 
            {
              Exp RESULT = null;

		// Default action for single-symbol production
		RESULT = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top)).value;
              CUP$Parser$result = new java_cup.runtime.Symbol(12/*term4*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // term5 ::= term5 AND term4 
            {
              Exp RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT =
                new UnresolvedFunCall("AND", Syntax.Infix, new Exp[] {x, y});
        
              CUP$Parser$result = new java_cup.runtime.Symbol(13/*term5*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // term5 ::= term4 
            {
              Exp RESULT = null;

		// Default action for single-symbol production
		RESULT = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top)).value;
              CUP$Parser$result = new java_cup.runtime.Symbol(13/*term5*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // value_expression ::= value_expression XOR term5 
            {
              Exp RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT =
                new UnresolvedFunCall("XOR", Syntax.Infix, new Exp[] {x, y});
        
              CUP$Parser$result = new java_cup.runtime.Symbol(14/*value_expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // value_expression ::= value_expression OR term5 
            {
              Exp RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT =
                new UnresolvedFunCall("OR", Syntax.Infix, new Exp[] {x, y});
        
              CUP$Parser$result = new java_cup.runtime.Symbol(14/*value_expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // value_expression ::= term5 
            {
              Exp RESULT = null;

		// Default action for single-symbol production
		RESULT = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top)).value;
              CUP$Parser$result = new java_cup.runtime.Symbol(14/*value_expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // cube_name ::= compound_id 
            {
              Id RESULT = null;

		// Default action for single-symbol production
		RESULT = (Id)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top)).value;
              CUP$Parser$result = new java_cup.runtime.Symbol(22/*cube_name*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // bang_compound_id ::= bang_compound_id BANG identifier 
            {
              Id RESULT = null;
		int hdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int hdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Id hd = (Id)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Id.Segment tl = (Id.Segment)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = hd.append(tl);
        
              CUP$Parser$result = new java_cup.runtime.Symbol(20/*bang_compound_id*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // bang_compound_id ::= identifier 
            {
              Id RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Id.Segment i = (Id.Segment)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = new Id(i);
        
              CUP$Parser$result = new java_cup.runtime.Symbol(20/*bang_compound_id*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // compound_id ::= compound_id DOT identifier 
            {
              Id RESULT = null;
		int hdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int hdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Id hd = (Id)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Id.Segment tl = (Id.Segment)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = hd.append(tl);
        
              CUP$Parser$result = new java_cup.runtime.Symbol(21/*compound_id*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // compound_id ::= identifier 
            {
              Id RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Id.Segment i = (Id.Segment)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = new Id(i);
        
              CUP$Parser$result = new java_cup.runtime.Symbol(21/*compound_id*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // keyword ::= PROPERTIES 
            {
              String RESULT = null;
		
            RESULT = "Properties";
        
              CUP$Parser$result = new java_cup.runtime.Symbol(28/*keyword*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // keyword ::= DIMENSION 
            {
              String RESULT = null;
		
            RESULT = "Dimension";
        
              CUP$Parser$result = new java_cup.runtime.Symbol(28/*keyword*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // identifier ::= quoted_identifier 
            {
              Id.Segment RESULT = null;

		// Default action for single-symbol production
		RESULT = (Id.Segment)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top)).value;
              CUP$Parser$result = new java_cup.runtime.Symbol(29/*identifier*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // identifier ::= unquoted_identifier 
            {
              Id.Segment RESULT = null;

		// Default action for single-symbol production
		RESULT = (Id.Segment)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top)).value;
              CUP$Parser$result = new java_cup.runtime.Symbol(29/*identifier*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // unquoted_identifier ::= keyword 
            {
              Id.Segment RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = new Id.Segment(i, Id.Quoting.UNQUOTED);
        
              CUP$Parser$result = new java_cup.runtime.Symbol(31/*unquoted_identifier*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // unquoted_identifier ::= ID 
            {
              Id.Segment RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = new Id.Segment(i, Id.Quoting.UNQUOTED);
        
              CUP$Parser$result = new java_cup.runtime.Symbol(31/*unquoted_identifier*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // amp_quoted_identifier ::= AMP_QUOTED_ID 
            {
              Id.Segment RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = new Id.Segment(i, Id.Quoting.KEY);
        
              CUP$Parser$result = new java_cup.runtime.Symbol(32/*amp_quoted_identifier*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // quoted_identifier ::= QUOTED_ID 
            {
              Id.Segment RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = new Id.Segment(i, Id.Quoting.QUOTED);
        
              CUP$Parser$result = new java_cup.runtime.Symbol(30/*quoted_identifier*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= statement EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		QueryPart start_val = (QueryPart)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

